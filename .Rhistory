install.packages(c("dplyr", "tidyr", "lubridate", "tidymodels", "ggplot2"))
library(dplyr)
library(tidyr)
library(lubridate)
library(tidymodels)
library(ggplot2)
setwd("D:/Desktop/CSP-571-Proj/dataset")
csv_files <- list.files(pattern = "*.csv")
for (file in csv_files) {
file_path <- file.path("D:/Desktop/CSP-571-Proj/dataset", file)
data <- read.csv(file_path)
data_list[[file]] <- data
}
data_list <- list()
for (file in csv_files) {
file_path <- file.path("D:/Desktop/CSP-571-Proj/dataset", file)
data <- read.csv(file_path)
data_list[[file]] <- data
}
View(data)
View(data_list)
merged_data <- do.call(rbind, data_list)
merged_data <- do.call(rbind, data_list)
View(merged_data)
write.csv(merged_data, "D:/Desktop/CSP-571-Proj/merged_data.csv", row.names = FALSE)
necessary <- c("ride_id","rideable_type", "started_at", "ended_at", "start_station_name", "end_station_name", "member_casual")
annual <- merged_data %>% select(all_of(necessary))
write.csv(merged_data, "D:/Desktop/CSP-571-Proj/merged_data.csv", row.names = FALSE)
write.csv(merged_data, "D:/Desktop/CSP-571-Proj/merged_data.csv", row.names = FALSE)
cleaned_annual <- annual %>% drop_na()
dim(cleaned_annual)
annual_cleaned <- na.omit(annual)
cleaned_annual <- cleaned_annual %>%
mutate(
started_at = ymd_hms(started_at),
ended_at = ymd_hms(ended_at)
)
View(cleaned_annual)
cleaned_annual <- cleaned_annual %>%
mutate(
started_at = ymd_hms(started_at),
ended_at = ymd_hms(ended_at)
)
View(cleaned_annual)
View(cleaned_annual)
View(cleaned_annual)
View(cleaned_annual)
cleaned <- cleaned %>%
mutate(
started_at = ymd_hms(started_at),
ended_at = ymd_hms(ended_at)
)
cleaned_annual <- cleaned_annual %>%
mutate(
started_at = ymd_hms(started_at),
ended_at = ymd_hms(ended_at)
)
cleaned_annual <- cleaned_annual %>%
mutate(
trip_duration = as.numeric(difftime(ended_at, started_at, units = "mins")),
day_of_week = wday(started_at, label = TRUE),
start_hour = hour(started_at)
)
cleaned_annual <- cleaned_annual %>%
filter(trip_duration > 0)
cleaned_annual <- cleaned_annual %>%
filter(trip_duration <= 1440)
cleaned_annual <- cleaned_annual %>%
filter(ended_at > started_at)
dim(cleaned)
cleaned_annual <- cleaned_annual %>%
filter(ended_at > started_at)
dim(cleaned_annual)
dim(cleaned_annual)
summary(cleaned_annual)
write.csv(cleaned_annual, "D:/Desktop/CSP-571-Proj/cleaned_annual.csv", row.names = FALSE)
# Calculate Z-scores
cleaned_annual <- cleaned_annual %>%
mutate(z_score = (trip_duration - mean(trip_duration)) / sd(trip_duration))
# Filter out rows with Z-scores greater than 3 or less than -3
cleaned_annual <- cleaned_annual %>%
filter(abs(z_score) <= 3) %>%
select(-z_score)
install.packages(c("dplyr", "tidyr", "lubridate", "tidymodels", "ggplot2", "dbscan"))
library(dplyr)
library(tidyr)
library(lubridate)
library(tidymodels)
library(ggplot2)
library(dbscan)
install.packages(c("dplyr", "tidyr", "lubridate", "tidymodels", "ggplot2", "dbscan"))
install.packages(c("dplyr", "tidyr", "lubridate", "tidymodels", "ggplot2", "dbscan"))
library(dplyr)
library(tidyr)
library(lubridate)
library(tidymodels)
library(ggplot2)
library(dbscan)
# Scale the data before applying DBSCAN
scaled_data <- scale(cleaned_annual$trip_duration)
# Apply DBSCAN
db <- dbscan(scaled_data, eps = 0.5, minPts = 5)
install.packages("dbscan")
library(dbscan)
# Scale the data before applying DBSCAN
scaled_data <- scale(cleaned_annual$trip_duration)
# Apply DBSCAN
db <- dbscan(scaled_data, eps = 0.5, minPts = 5)
# Scale the data before applying DBSCAN
scaled_data <- scale(cleaned_annual$trip_duration)
# Apply DBSCAN
db <- dbscan(scaled_data, eps = 0.5, minPts = 5)
library(isotree)
install.packages("isotree")
library(isotree)
# Fit Isolation Forest model
iso_forest <- isolation.forest(cleaned_annual$trip_duration, ntrees = 100)
data_matrix <- as.matrix(cleaned_annual)
# Fit Isolation Forest model
iso_forest <- isolation.forest(cleaned_annual$trip_duration, ntrees = 100)
#### Isolation Forest Method for outlier detection
data_matrix <- as.matrix(cleaned_annual)
# Fit Isolation Forest model
iso_forest <- isolation.forest(data_matrix, ntrees = 100)
# Predict outliers
outlier_scores <- predict(iso_forest, data_matrix)
# Set a threshold for outlier scores
threshold <- 0.5
# Filter out outliers
cleaned_annual_isoforest <- cleaned_annual[outlier_scores < threshold, ]
write.csv(cleaned_annual_isoforest, "D:/Desktop/CSP-571-Proj/dataset/cleaned_annual_isoforest.csv", row.names = FALSE)
# Min-Max Normalization
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(trip_duration_normalized = (trip_duration - min(trip_duration)) / (max(trip_duration) - min(trip_duration)))
\install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
# Min-Max Normalization
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(trip_duration_normalized = (trip_duration - min(cleaned_annual_isoforest$trip_duration)) /
(max(cleaned_annual_isoforest$trip_duration) - min(cleaned_annual_isoforest$trip_duration)))
# Min-Max Normalization
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(trip_duration_normalized = (trip_duration - min(cleaned_annual_isoforest$trip_duration)) /
(max(cleaned_annual_isoforest$trip_duration) - min(cleaned_annual_isoforest$trip_duration)))
# Load necessary libraries including dplyr
library(dplyr)
# Min-Max Normalization
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(trip_duration_normalized = (trip_duration - min(trip_duration))/(max(trip_duration) - min(trip_duration)))
# Standardization
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(trip_duration_standardized = (trip_duration - mean(trip_duration)) / sd(trip_duration))
# Log Transformation
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(trip_duration_log = log(trip_duration + 1))
# Extract date and time features
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(
start_date = as.Date(started_at),
start_month = month(started_at, label = TRUE),
start_day = day(started_at),
start_hour = hour(started_at),
start_minute = minute(started_at),
end_date = as.Date(ended_at),
end_month = month(ended_at, label = TRUE),
end_day = day(ended_at),
end_hour = hour(ended_at),
end_minute = minute(ended_at)
)
# Load necessary libraries including dplyr and lubridate
library(dplyr)
library(lubridate)
# Update date and time features
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(
start_date = as.Date(started_at),
start_month = lubridate::month(started_at, label = TRUE),
start_day = day(started_at),
start_hour = hour(started_at),
start_minute = minute(started_at),
end_date = as.Date(ended_at),
end_month = lubridate::month(ended_at, label = TRUE),
end_day = day(ended_at),
end_hour = hour(ended_at),
end_minute = minute(ended_at)
)
# One-Hot Encoding for 'rideable_type' and 'member_casual'
transformed_data <- cleaned_annual_isoforest %>%
mutate(rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual))
transformed_data <- transformed_data %>%
tidyr::pivot_wider(names_from = rideable_type, values_from = rideable_type, values_fill = list(rideable_type = 0)) %>%
tidyr::pivot_wider(names_from = member_casual, values_from = member_casual, values_fill = list(member_casual = 0))
# One-Hot Encoding for 'rideable_type' and 'member_casual'
transformed_data <- cleaned_annual_isoforest %>%
mutate(
rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual)
)
# Pivot wider for one-hot encoding
transformed_data <- transformed_data %>%
tidyr::pivot_wider(
names_from = rideable_type,
values_from = rideable_type,
values_fill = 0
) %>%
tidyr::pivot_wider(
names_from = member_casual,
values_from = member_casual,
values_fill = 0
)
# One-Hot Encoding for 'rideable_type' and 'member_casual'
transformed_data <- cleaned_annual_isoforest %>%
mutate(
rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual)
)
# Pivot wider for one-hot encoding
transformed_data <- transformed_data %>%
pivot_wider(
names_from = rideable_type,
values_from = rideable_type,
values_fill = 0
) %>%
pivot_wider(
names_from = member_casual,
values_from = member_casual,
values_fill = 0
)
# Load necessary packages
library(dplyr)
library(tidyr)
library(lubridate)
# One-Hot Encoding for 'rideable_type' and 'member_casual'
transformed_data <- cleaned_annual_isoforest %>%
mutate(
rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual)
)
# Pivot wider for one-hot encoding
transformed_data <- transformed_data %>%
tidyr::pivot_wider(
names_from = rideable_type,
values_from = rideable_type,
values_fill = 0
) %>%
tidyr::pivot_wider(
names_from = member_casual,
values_from = member_casual,
values_fill = 0
)
# Load necessary packages
library(dplyr)
library(tidyr)
library(lubridate)
# Ensure rideable_type and member_casual are factors
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(
rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual)
)
# Pivot wider for one-hot encoding
transformed_data <- cleaned_annual_isoforest %>%
pivot_wider(
names_from = rideable_type,
values_from = rideable_type,
values_fill = 0  # Ensure values_fill is set to a numeric value for binary encoding
) %>%
pivot_wider(
names_from = member_casual,
values_from = member_casual,
values_fill = 0  # Ensure values_fill is set to a numeric value for binary encoding
)
# Load necessary packages
library(dplyr)
library(tidyr)
library(lubridate)
# Assuming cleaned_annual_isoforest is your cleaned and preprocessed data
# Ensure rideable_type and member_casual are factors
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(
rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual)
)
# Pivot wider for one-hot encoding
transformed_data <- cleaned_annual_isoforest %>%
pivot_wider(
names_from = rideable_type,
values_from = rideable_type,
values_fill = list(rideable_type = 0),
names_prefix = "rideable_type_"
) %>%
pivot_wider(
names_from = member_casual,
values_from = member_casual,
values_fill = list(member_casual = 0),
names_prefix = "member_casual_"
)
# Load necessary packages
library(dplyr)
library(tidyr)
library(lubridate)
# Assuming cleaned_annual_isoforest is your cleaned and preprocessed data
# Ensure rideable_type and member_casual are factors
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(
rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual)
)
# Pivot wider for one-hot encoding
transformed_data <- cleaned_annual_isoforest %>%
pivot_wider(
id_cols = c(started_at, ended_at, start_station_name, end_station_name, trip_duration, day_of_week, start_hour),
names_from = rideable_type,
values_from = rideable_type,
values_fill = list(rideable_type = 0),
names_prefix = "rideable_type_"
) %>%
pivot_wider(
names_from = member_casual,
values_from = member_casual,
values_fill = list(member_casual = 0),
names_prefix = "member_casual_"
)
# Load necessary packages
library(dplyr)
library(tidyr)
library(lubridate)
# Assuming cleaned_annual_isoforest is your cleaned and preprocessed data
# Ensure rideable_type and member_casual are factors
cleaned_annual_isoforest <- cleaned_annual_isoforest %>%
mutate(
rideable_type = as.factor(rideable_type),
member_casual = as.factor(member_casual)
)
# Additional feature engineering
transformed_data <- transformed_data %>%
mutate(
trip_duration_hours = trip_duration / 60,
time_of_day = case_when(
start_hour >= 5 & start_hour < 12 ~ "Morning",
start_hour >= 12 & start_hour < 17 ~ "Afternoon",
start_hour >= 17 & start_hour < 21 ~ "Evening",
TRUE ~ "Night"
),
season = case_when(
month(started_at) %in% c(12, 1, 2) ~ "Winter",
month(started_at) %in% c(3, 4, 5) ~ "Spring",
month(started_at) %in% c(6, 7, 8) ~ "Summer",
month(started_at) %in% c(9, 10, 11) ~ "Fall"
)
)
# Display the transformed dataset
head(transformed_data)
View(transformed_data)
View(transformed_data)
# Perform Shapiro-Wilk test for trip_duration_hours
shapiro_test <- shapiro.test(transformed_data$trip_duration_hours)
write.csv(transformed_data, "D:/Desktop/CSP-571-Proj/dataset/transformed_data.csv", row.names = FALSE)
